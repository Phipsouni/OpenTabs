// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
// –≠—Ç–æ –∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.
function waitForElement(selector, maxAttempts = 15, interval = 300) {
    return new Promise((resolve, reject) => {
        let attempts = 0;
        const checkElement = () => {
            const element = document.querySelector(selector);
            if (element) {
                resolve(element);
            } else if (attempts < maxAttempts) {
                attempts++;
                setTimeout(checkElement, interval);
            } else {
                reject(new Error(`–≠–ª–µ–º–µ–Ω—Ç "${selector}" –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫ (${maxAttempts * interval / 1000} —Å–µ–∫—É–Ω–¥).`));
            }
        };
        checkElement();
    });
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã ---
async function automateFormInteraction() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã...");

    try {
        // --- –®–∞–≥ 0: –ù–∞–∂–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É (–∫–∞–∫ –≤—ã —É–∂–µ —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–ª–∏) ---
        // –ï—Å–ª–∏ —ç—Ç–æ—Ç —à–∞–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å.
        console.log("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ '–ü–µ—á–∞—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ (–°–ú–ì–° (2015))'...");
        const targetTitleBtn = "–ü–µ—á–∞—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ (–°–ú–ì–° (2015))";
        const targetClassBtn = "xm-tabsheet-caption-text";
        const mainButton = await waitForElement(`div.${targetClassBtn}[title="${targetTitleBtn}"]`);
        mainButton.click();
        console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ "${targetTitleBtn}" –Ω–∞–∂–∞—Ç–∞.`);
        await new Promise(r => setTimeout(r, 1000)); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—ã/–æ–∫–Ω–∞

        // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ —á–µ–∫–±–æ–∫—Å—É —á–µ—Ä–µ–∑ label text ---
        const clickCheckboxByLabelText = async (labelText) => {
            console.log(`üîé –ü–æ–∏—Å–∫ —á–µ–∫–±–æ–∫—Å–∞ –¥–ª—è: '${labelText}'...`);
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ label, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
            await waitForElement('label.xm-gui-labeled-object-label', 20, 100);

            // –ò—â–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ label —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const allLabels = document.querySelectorAll('label.xm-gui-labeled-object-label');
            let targetLabel = null;
            for (const label of allLabels) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º includes() –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏, –Ω–æ trim() –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤
                if (label.textContent.trim().includes(labelText)) {
                    targetLabel = label;
                    break;
                }
            }

            if (targetLabel) {
                // –ò—â–µ–º input[type="checkbox"] –≤–Ω—É—Ç—Ä–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ label
                const checkboxInput = targetLabel.querySelector('input[type="checkbox"].xm-checkbox__input');
                if (checkboxInput) {
                    checkboxInput.click();
                    console.log(`‚úÖ –ß–µ–∫–±–æ–∫—Å –¥–ª—è '${labelText}' –Ω–∞–∂–∞—Ç.`);
                } else {
                    console.warn(`‚ö†Ô∏è Input-—á–µ–∫–±–æ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–Ω—É—Ç—Ä–∏ label –¥–ª—è '${labelText}'.`);
                }
            } else {
                console.error(`‚ùå Label —Å —Ç–µ–∫—Å—Ç–æ–º '${labelText}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.`);
            }
            await new Promise(r => setTimeout(r, 300)); // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å —á–µ–∫–±–æ–∫—Å–æ–º
        };

        // --- –®–∞–≥ 1: –ù–∞–∂–∞—Ç—å –Ω–∞ —á–µ–∫–±–æ–∫—Å "–í–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –≥—Ä–∞—Ñ—ã 33-34" ---
        await clickCheckboxByLabelText('–í–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –≥—Ä–∞—Ñ—ã 33-34');

        // --- –®–∞–≥ 2: –ù–∞–∂–∞—Ç—å –Ω–∞ —á–µ–∫–±–æ–∫—Å "–ü–µ—á–∞—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–æ—Ä–æ–∂–Ω–æ–π –≤–µ–¥–æ–º–æ—Å—Ç–∏" ---
        await clickCheckboxByLabelText('–ü–µ—á–∞—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–æ—Ä–æ–∂–Ω–æ–π –≤–µ–¥–æ–º–æ—Å—Ç–∏');

        // --- –®–∞–≥ 3: –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–æ—Ä–æ–∂–Ω–æ–π –≤–µ–¥–æ–º–æ—Å—Ç–∏" ---
        console.log("‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–æ—Ä–æ–∂–Ω–æ–π –≤–µ–¥–æ–º–æ—Å—Ç–∏'...");
        const label3Text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–æ—Ä–æ–∂–Ω–æ–π –≤–µ–¥–æ–º–æ—Å—Ç–∏';
        await waitForElement('label.xm-gui-labeled-object-label', 20, 100); // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ label'—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        
        let targetLabelForInput = null;
        const allLabelsForInput = document.querySelectorAll('label.xm-gui-labeled-object-label');
        for (const label of allLabelsForInput) {
            if (label.textContent.trim().includes(label3Text)) {
                targetLabelForInput = label;
                break;
            }
        }

        if (targetLabelForInput) {
            // –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—ã—á–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –¥–ª—è label
            const inputField = targetLabelForInput.nextElementSibling;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ input –∏ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å
            if (inputField && inputField.tagName === 'INPUT' && inputField.classList.contains('xm-edit')) {
                inputField.value = '3';
                // –í–∞–∂–Ω–æ: –¥–ª—è SPA-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤–≤–æ–¥–∞
                inputField.dispatchEvent(new Event('input', { bubbles: true }));
                inputField.dispatchEvent(new Event('change', { bubbles: true }));
                console.log(`‚úÖ –í –ø–æ–ª–µ '${label3Text}' –≤–≤–µ–¥–µ–Ω–æ '3'.`);
            } else {
                console.warn(`‚ö†Ô∏è –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä—è–¥–æ–º —Å label –¥–ª—è '${label3Text}'.`);
            }
        } else {
            console.error(`‚ùå Label —Å —Ç–µ–∫—Å—Ç–æ–º '${label3Text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.`);
        }
        await new Promise(r => setTimeout(r, 300));

        // --- –®–∞–≥ 4: –ù–∞–∂–∞—Ç—å –Ω–∞ —á–µ–∫–±–æ–∫—Å "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–æ—Ä–æ–∂–Ω–æ–π –≤–µ–¥–æ–º–æ—Å—Ç–∏" ---
        await clickCheckboxByLabelText('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–æ—Ä–æ–∂–Ω–æ–π –≤–µ–¥–æ–º–æ—Å—Ç–∏');

        // --- –®–∞–≥ 5: –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û–ö" (–ø–µ—Ä–≤—É—é) ---
        console.log("üîò –ù–∞–∂–∞—Ç–∏–µ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏ '–û–ö'...");
        const okButton1 = await waitForElement('span.button__caption.js-button-caption');
        if (okButton1 && okButton1.textContent.trim() === '–û–ö') {
            okButton1.click();
            console.log("‚úÖ –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ '–û–ö' –Ω–∞–∂–∞—Ç–∞.");
        } else {
            console.error("‚ùå –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ '–û–ö' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        }
        await new Promise(r => setTimeout(r, 1500)); // –£–≤–µ–ª–∏—á–µ–Ω–∞ –ø–∞—É–∑–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞

        // --- –®–∞–≥ 6: –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã" –∏ –∫–Ω–æ–ø–∫–∞ "–û–ö" –≤ –Ω–µ–º ---
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã'...");
        await waitForElement('div.dialog-title.js-dialog-title[title="–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã"]', 10, 500); // –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫, –Ω–æ –¥–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–∫–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ
        console.log("‚úÖ –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ '–û–ö' –≤ –Ω–µ–º...");

        const okButton2 = await waitForElement('button.xm-object.xm-button[xm-caption="–û–ö"]');
        if (okButton2 && okButton2.textContent.trim() === '–û–ö') {
            okButton2.click();
            console.log("‚úÖ –ö–Ω–æ–ø–∫–∞ '–û–ö' –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã' –Ω–∞–∂–∞—Ç–∞.");
        } else {
            console.error("‚ùå –ö–Ω–æ–ø–∫–∞ '–û–ö' –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        }

        console.log("üéâ –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");

    } catch (error) {
        console.error("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:", error.message);
    }
}

// --- –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ---
automateFormInteraction();
